// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/messages/Messages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mydb {
class Request_TextRowEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Request::Request_TextRowEntry> {
} _Request_TextRowEntry_default_instance_;
class RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Request> {
} _Request_default_instance_;
class Response_TextResultEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Response::Response_TextResultEntry> {
} _Response_TextResultEntry_default_instance_;
class ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Response> {
} _Response_default_instance_;

namespace protobuf_src_2fmessages_2fMessages_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, table_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, fields_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, text_row_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, long_field_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, long_row_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, isstatusok_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, long_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, text_result_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Request)},
  { 12, -1, sizeof(Response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Request_TextRowEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Response_TextResultEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Response_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "src/messages/Messages.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
file_level_metadata[0].reflection = Request::Request_TextRowEntry::CreateReflection(file_level_metadata[0].descriptor, _Request_TextRowEntry_default_instance_.get_mutable());
file_level_metadata[2].reflection = Response::Response_TextResultEntry::CreateReflection(file_level_metadata[2].descriptor, _Response_TextResultEntry_default_instance_.get_mutable());
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _Request_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Response_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  delete file_level_metadata[0].reflection;
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Request_TextRowEntry_default_instance_.DefaultConstruct();
  _Request_default_instance_.DefaultConstruct();
  _Response_TextResultEntry_default_instance_.DefaultConstruct();
  _Response_default_instance_.DefaultConstruct();
  _Request_TextRowEntry_default_instance_.get_mutable()->set_default_instance(_Request_TextRowEntry_default_instance_.get_mutable());
  _Request_TextRowEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  _Response_TextResultEntry_default_instance_.get_mutable()->set_default_instance(_Response_TextResultEntry_default_instance_.get_mutable());
  _Response_TextResultEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\033src/messages/Messages.proto\022\004mydb\"\341\002\n\007"
      "Request\022(\n\004type\030\001 \001(\0162\032.mydb.Request.REQ"
      "UEST_TYPE\022\r\n\005table\030\002 \001(\t\022\013\n\003key\030\003 \001(\t\022\016\n"
      "\006fields\030\004 \003(\t\022,\n\010text_row\030\005 \003(\0132\032.mydb.R"
      "equest.TextRowEntry\022\022\n\nlong_field\030\006 \001(\t\022"
      "\020\n\010long_row\030\007 \001(\022\032.\n\014TextRowEntry\022\013\n\003key"
      "\030\001 \001(\t\022\r\n\005value\030\002 \001(\014:\0028\001\"|\n\014REQUEST_TYP"
      "E\022\017\n\013INSERT_TEXT\020\000\022\017\n\013INSERT_LONG\020\001\022\r\n\tR"
      "EAD_TEXT\020\002\022\r\n\tREAD_LONG\020\003\022\017\n\013UPDATE_TEXT"
      "\020\004\022\017\n\013UPDATE_LONG\020\005\022\n\n\006DELETE\020\006\"\202\002\n\010Resp"
      "onse\022*\n\004type\030\001 \001(\0162\034.mydb.Response.RESPO"
      "NSE_TYPE\022\022\n\nisStatusOk\030\002 \001(\010\022\023\n\013long_res"
      "ult\030\003 \001(\t\0223\n\013text_result\030\004 \003(\0132\036.mydb.Re"
      "sponse.TextResultEntry\0321\n\017TextResultEntr"
      "y\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\014:\0028\001\"9\n\rRES"
      "PONSE_TYPE\022\r\n\tREAD_TEXT\020\000\022\r\n\tREAD_LONG\020\001"
      "\022\n\n\006STATUS\020\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 660);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "src/messages/Messages.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_src_2fmessages_2fMessages_2eproto

const ::google::protobuf::EnumDescriptor* Request_REQUEST_TYPE_descriptor() {
  protobuf_src_2fmessages_2fMessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fmessages_2fMessages_2eproto::file_level_enum_descriptors[0];
}
bool Request_REQUEST_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Request_REQUEST_TYPE Request::INSERT_TEXT;
const Request_REQUEST_TYPE Request::INSERT_LONG;
const Request_REQUEST_TYPE Request::READ_TEXT;
const Request_REQUEST_TYPE Request::READ_LONG;
const Request_REQUEST_TYPE Request::UPDATE_TEXT;
const Request_REQUEST_TYPE Request::UPDATE_LONG;
const Request_REQUEST_TYPE Request::DELETE;
const Request_REQUEST_TYPE Request::REQUEST_TYPE_MIN;
const Request_REQUEST_TYPE Request::REQUEST_TYPE_MAX;
const int Request::REQUEST_TYPE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Response_RESPONSE_TYPE_descriptor() {
  protobuf_src_2fmessages_2fMessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fmessages_2fMessages_2eproto::file_level_enum_descriptors[1];
}
bool Response_RESPONSE_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Response_RESPONSE_TYPE Response::READ_TEXT;
const Response_RESPONSE_TYPE Response::READ_LONG;
const Response_RESPONSE_TYPE Response::STATUS;
const Response_RESPONSE_TYPE Response::RESPONSE_TYPE_MIN;
const Response_RESPONSE_TYPE Response::RESPONSE_TYPE_MAX;
const int Response::RESPONSE_TYPE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

Request::Request_TextRowEntry::Request_TextRowEntry() {}
Request::Request_TextRowEntry::Request_TextRowEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata Request::Request_TextRowEntry::GetMetadata() const {
  protobuf_src_2fmessages_2fMessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fmessages_2fMessages_2eproto::file_level_metadata[0];
}
void Request::Request_TextRowEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void Request::Request_TextRowEntry::MergeFrom(const Request_TextRowEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kTypeFieldNumber;
const int Request::kTableFieldNumber;
const int Request::kKeyFieldNumber;
const int Request::kFieldsFieldNumber;
const int Request::kTextRowFieldNumber;
const int Request::kLongFieldFieldNumber;
const int Request::kLongRowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fmessages_2fMessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mydb.Request)
}
Request::Request(const Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      fields_(from.fields_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_row_.MergeFrom(from.text_row_);
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table().size() > 0) {
    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  long_field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.long_field().size() > 0) {
    long_field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.long_field_);
  }
  ::memcpy(&long_row_, &from.long_row_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&long_row_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:mydb.Request)
}

void Request::SharedCtor() {
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  long_field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&long_row_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&long_row_) + sizeof(type_));
  _cached_size_ = 0;
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:mydb.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  long_field_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_src_2fmessages_2fMessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fmessages_2fMessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Request& Request::default_instance() {
  protobuf_src_2fmessages_2fMessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

Request* Request::New(::google::protobuf::Arena* arena) const {
  Request* n = new Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:mydb.Request)
  fields_.Clear();
  text_row_.Clear();
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  long_field_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&long_row_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&long_row_) + sizeof(type_));
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mydb.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mydb.Request.REQUEST_TYPE type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::mydb::Request_REQUEST_TYPE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string table = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table().data(), this->table().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mydb.Request.table"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mydb.Request.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string fields = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fields()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fields(this->fields_size() - 1).data(),
            this->fields(this->fields_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mydb.Request.fields"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, bytes> text_row = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          Request_TextRowEntry::Parser< ::google::protobuf::internal::MapField<
              Request_TextRowEntry,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&text_row_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mydb.Request.TextRowEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string long_field = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_long_field()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->long_field().data(), this->long_field().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mydb.Request.long_field"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint64 long_row = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &long_row_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mydb.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mydb.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mydb.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mydb.Request.REQUEST_TYPE type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), this->table().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mydb.Request.table");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->table(), output);
  }

  // string key = 3;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mydb.Request.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->key(), output);
  }

  // repeated string fields = 4;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), this->fields(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mydb.Request.fields");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->fields(i), output);
  }

  // map<string, bytes> text_row = 5;
  if (!this->text_row().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "mydb.Request.TextRowEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->text_row().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->text_row().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->text_row().begin();
          it != this->text_row().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Request_TextRowEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(text_row_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Request_TextRowEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->text_row().begin();
          it != this->text_row().end(); ++it) {
        entry.reset(text_row_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // string long_field = 6;
  if (this->long_field().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->long_field().data(), this->long_field().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mydb.Request.long_field");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->long_field(), output);
  }

  // sint64 long_row = 7;
  if (this->long_row() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(7, this->long_row(), output);
  }

  // @@protoc_insertion_point(serialize_end:mydb.Request)
}

::google::protobuf::uint8* Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mydb.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mydb.Request.REQUEST_TYPE type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), this->table().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mydb.Request.table");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->table(), target);
  }

  // string key = 3;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mydb.Request.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->key(), target);
  }

  // repeated string fields = 4;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), this->fields(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mydb.Request.fields");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->fields(i), target);
  }

  // map<string, bytes> text_row = 5;
  if (!this->text_row().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "mydb.Request.TextRowEntry.key");
      }
    };

    if (deterministic &&
        this->text_row().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->text_row().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->text_row().begin();
          it != this->text_row().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Request_TextRowEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(text_row_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Request_TextRowEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->text_row().begin();
          it != this->text_row().end(); ++it) {
        entry.reset(text_row_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // string long_field = 6;
  if (this->long_field().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->long_field().data(), this->long_field().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mydb.Request.long_field");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->long_field(), target);
  }

  // sint64 long_row = 7;
  if (this->long_row() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(7, this->long_row(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mydb.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mydb.Request)
  size_t total_size = 0;

  // repeated string fields = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->fields_size());
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fields(i));
  }

  // map<string, bytes> text_row = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->text_row_size());
  {
    ::google::protobuf::scoped_ptr<Request_TextRowEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->text_row().begin();
        it != this->text_row().end(); ++it) {
      entry.reset(text_row_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string table = 2;
  if (this->table().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table());
  }

  // string key = 3;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string long_field = 6;
  if (this->long_field().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->long_field());
  }

  // sint64 long_row = 7;
  if (this->long_row() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->long_row());
  }

  // .mydb.Request.REQUEST_TYPE type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mydb.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mydb.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mydb.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mydb.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  text_row_.MergeFrom(from.text_row_);
  if (from.table().size() > 0) {

    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.long_field().size() > 0) {

    long_field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.long_field_);
  }
  if (from.long_row() != 0) {
    set_long_row(from.long_row());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mydb.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mydb.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  fields_.InternalSwap(&other->fields_);
  text_row_.Swap(&other->text_row_);
  table_.Swap(&other->table_);
  key_.Swap(&other->key_);
  long_field_.Swap(&other->long_field_);
  std::swap(long_row_, other->long_row_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_src_2fmessages_2fMessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fmessages_2fMessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request

// .mydb.Request.REQUEST_TYPE type = 1;
void Request::clear_type() {
  type_ = 0;
}
::mydb::Request_REQUEST_TYPE Request::type() const {
  // @@protoc_insertion_point(field_get:mydb.Request.type)
  return static_cast< ::mydb::Request_REQUEST_TYPE >(type_);
}
void Request::set_type(::mydb::Request_REQUEST_TYPE value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:mydb.Request.type)
}

// string table = 2;
void Request::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Request::table() const {
  // @@protoc_insertion_point(field_get:mydb.Request.table)
  return table_.GetNoArena();
}
void Request::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mydb.Request.table)
}
#if LANG_CXX11
void Request::set_table(::std::string&& value) {
  
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mydb.Request.table)
}
#endif
void Request::set_table(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mydb.Request.table)
}
void Request::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mydb.Request.table)
}
::std::string* Request::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:mydb.Request.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Request::release_table() {
  // @@protoc_insertion_point(field_release:mydb.Request.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Request::set_allocated_table(::std::string* table) {
  if (table != NULL) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:mydb.Request.table)
}

// string key = 3;
void Request::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Request::key() const {
  // @@protoc_insertion_point(field_get:mydb.Request.key)
  return key_.GetNoArena();
}
void Request::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mydb.Request.key)
}
#if LANG_CXX11
void Request::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mydb.Request.key)
}
#endif
void Request::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mydb.Request.key)
}
void Request::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mydb.Request.key)
}
::std::string* Request::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:mydb.Request.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Request::release_key() {
  // @@protoc_insertion_point(field_release:mydb.Request.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Request::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:mydb.Request.key)
}

// repeated string fields = 4;
int Request::fields_size() const {
  return fields_.size();
}
void Request::clear_fields() {
  fields_.Clear();
}
const ::std::string& Request::fields(int index) const {
  // @@protoc_insertion_point(field_get:mydb.Request.fields)
  return fields_.Get(index);
}
::std::string* Request::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:mydb.Request.fields)
  return fields_.Mutable(index);
}
void Request::set_fields(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:mydb.Request.fields)
  fields_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void Request::set_fields(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:mydb.Request.fields)
  fields_.Mutable(index)->assign(std::move(value));
}
#endif
void Request::set_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mydb.Request.fields)
}
void Request::set_fields(int index, const char* value, size_t size) {
  fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mydb.Request.fields)
}
::std::string* Request::add_fields() {
  // @@protoc_insertion_point(field_add_mutable:mydb.Request.fields)
  return fields_.Add();
}
void Request::add_fields(const ::std::string& value) {
  fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mydb.Request.fields)
}
#if LANG_CXX11
void Request::add_fields(::std::string&& value) {
  fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mydb.Request.fields)
}
#endif
void Request::add_fields(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mydb.Request.fields)
}
void Request::add_fields(const char* value, size_t size) {
  fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mydb.Request.fields)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Request::fields() const {
  // @@protoc_insertion_point(field_list:mydb.Request.fields)
  return fields_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Request::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:mydb.Request.fields)
  return &fields_;
}

// map<string, bytes> text_row = 5;
int Request::text_row_size() const {
  return text_row_.size();
}
void Request::clear_text_row() {
  text_row_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
Request::text_row() const {
  // @@protoc_insertion_point(field_map:mydb.Request.text_row)
  return text_row_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
Request::mutable_text_row() {
  // @@protoc_insertion_point(field_mutable_map:mydb.Request.text_row)
  return text_row_.MutableMap();
}

// string long_field = 6;
void Request::clear_long_field() {
  long_field_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Request::long_field() const {
  // @@protoc_insertion_point(field_get:mydb.Request.long_field)
  return long_field_.GetNoArena();
}
void Request::set_long_field(const ::std::string& value) {
  
  long_field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mydb.Request.long_field)
}
#if LANG_CXX11
void Request::set_long_field(::std::string&& value) {
  
  long_field_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mydb.Request.long_field)
}
#endif
void Request::set_long_field(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  long_field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mydb.Request.long_field)
}
void Request::set_long_field(const char* value, size_t size) {
  
  long_field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mydb.Request.long_field)
}
::std::string* Request::mutable_long_field() {
  
  // @@protoc_insertion_point(field_mutable:mydb.Request.long_field)
  return long_field_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Request::release_long_field() {
  // @@protoc_insertion_point(field_release:mydb.Request.long_field)
  
  return long_field_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Request::set_allocated_long_field(::std::string* long_field) {
  if (long_field != NULL) {
    
  } else {
    
  }
  long_field_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), long_field);
  // @@protoc_insertion_point(field_set_allocated:mydb.Request.long_field)
}

// sint64 long_row = 7;
void Request::clear_long_row() {
  long_row_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Request::long_row() const {
  // @@protoc_insertion_point(field_get:mydb.Request.long_row)
  return long_row_;
}
void Request::set_long_row(::google::protobuf::int64 value) {
  
  long_row_ = value;
  // @@protoc_insertion_point(field_set:mydb.Request.long_row)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

Response::Response_TextResultEntry::Response_TextResultEntry() {}
Response::Response_TextResultEntry::Response_TextResultEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata Response::Response_TextResultEntry::GetMetadata() const {
  protobuf_src_2fmessages_2fMessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fmessages_2fMessages_2eproto::file_level_metadata[2];
}
void Response::Response_TextResultEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void Response::Response_TextResultEntry::MergeFrom(const Response_TextResultEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kTypeFieldNumber;
const int Response::kIsStatusOkFieldNumber;
const int Response::kLongResultFieldNumber;
const int Response::kTextResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_src_2fmessages_2fMessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mydb.Response)
}
Response::Response(const Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_result_.MergeFrom(from.text_result_);
  long_result_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.long_result().size() > 0) {
    long_result_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.long_result_);
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&isstatusok_) -
    reinterpret_cast<char*>(&type_) + sizeof(isstatusok_));
  // @@protoc_insertion_point(copy_constructor:mydb.Response)
}

void Response::SharedCtor() {
  long_result_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, reinterpret_cast<char*>(&isstatusok_) -
    reinterpret_cast<char*>(&type_) + sizeof(isstatusok_));
  _cached_size_ = 0;
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:mydb.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  long_result_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_src_2fmessages_2fMessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fmessages_2fMessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Response& Response::default_instance() {
  protobuf_src_2fmessages_2fMessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

Response* Response::New(::google::protobuf::Arena* arena) const {
  Response* n = new Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:mydb.Response)
  text_result_.Clear();
  long_result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, reinterpret_cast<char*>(&isstatusok_) -
    reinterpret_cast<char*>(&type_) + sizeof(isstatusok_));
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mydb.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mydb.Response.RESPONSE_TYPE type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::mydb::Response_RESPONSE_TYPE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isStatusOk = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isstatusok_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string long_result = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_long_result()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->long_result().data(), this->long_result().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mydb.Response.long_result"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, bytes> text_result = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          Response_TextResultEntry::Parser< ::google::protobuf::internal::MapField<
              Response_TextResultEntry,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&text_result_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mydb.Response.TextResultEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mydb.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mydb.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mydb.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mydb.Response.RESPONSE_TYPE type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // bool isStatusOk = 2;
  if (this->isstatusok() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isstatusok(), output);
  }

  // string long_result = 3;
  if (this->long_result().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->long_result().data(), this->long_result().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mydb.Response.long_result");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->long_result(), output);
  }

  // map<string, bytes> text_result = 4;
  if (!this->text_result().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "mydb.Response.TextResultEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->text_result().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->text_result().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->text_result().begin();
          it != this->text_result().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Response_TextResultEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(text_result_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Response_TextResultEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->text_result().begin();
          it != this->text_result().end(); ++it) {
        entry.reset(text_result_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:mydb.Response)
}

::google::protobuf::uint8* Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mydb.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mydb.Response.RESPONSE_TYPE type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // bool isStatusOk = 2;
  if (this->isstatusok() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isstatusok(), target);
  }

  // string long_result = 3;
  if (this->long_result().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->long_result().data(), this->long_result().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mydb.Response.long_result");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->long_result(), target);
  }

  // map<string, bytes> text_result = 4;
  if (!this->text_result().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "mydb.Response.TextResultEntry.key");
      }
    };

    if (deterministic &&
        this->text_result().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->text_result().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->text_result().begin();
          it != this->text_result().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Response_TextResultEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(text_result_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Response_TextResultEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->text_result().begin();
          it != this->text_result().end(); ++it) {
        entry.reset(text_result_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:mydb.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mydb.Response)
  size_t total_size = 0;

  // map<string, bytes> text_result = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->text_result_size());
  {
    ::google::protobuf::scoped_ptr<Response_TextResultEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->text_result().begin();
        it != this->text_result().end(); ++it) {
      entry.reset(text_result_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string long_result = 3;
  if (this->long_result().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->long_result());
  }

  // .mydb.Response.RESPONSE_TYPE type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // bool isStatusOk = 2;
  if (this->isstatusok() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mydb.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mydb.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mydb.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mydb.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  text_result_.MergeFrom(from.text_result_);
  if (from.long_result().size() > 0) {

    long_result_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.long_result_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.isstatusok() != 0) {
    set_isstatusok(from.isstatusok());
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mydb.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mydb.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  text_result_.Swap(&other->text_result_);
  long_result_.Swap(&other->long_result_);
  std::swap(type_, other->type_);
  std::swap(isstatusok_, other->isstatusok_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_src_2fmessages_2fMessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fmessages_2fMessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response

// .mydb.Response.RESPONSE_TYPE type = 1;
void Response::clear_type() {
  type_ = 0;
}
::mydb::Response_RESPONSE_TYPE Response::type() const {
  // @@protoc_insertion_point(field_get:mydb.Response.type)
  return static_cast< ::mydb::Response_RESPONSE_TYPE >(type_);
}
void Response::set_type(::mydb::Response_RESPONSE_TYPE value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:mydb.Response.type)
}

// bool isStatusOk = 2;
void Response::clear_isstatusok() {
  isstatusok_ = false;
}
bool Response::isstatusok() const {
  // @@protoc_insertion_point(field_get:mydb.Response.isStatusOk)
  return isstatusok_;
}
void Response::set_isstatusok(bool value) {
  
  isstatusok_ = value;
  // @@protoc_insertion_point(field_set:mydb.Response.isStatusOk)
}

// string long_result = 3;
void Response::clear_long_result() {
  long_result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Response::long_result() const {
  // @@protoc_insertion_point(field_get:mydb.Response.long_result)
  return long_result_.GetNoArena();
}
void Response::set_long_result(const ::std::string& value) {
  
  long_result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mydb.Response.long_result)
}
#if LANG_CXX11
void Response::set_long_result(::std::string&& value) {
  
  long_result_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mydb.Response.long_result)
}
#endif
void Response::set_long_result(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  long_result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mydb.Response.long_result)
}
void Response::set_long_result(const char* value, size_t size) {
  
  long_result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mydb.Response.long_result)
}
::std::string* Response::mutable_long_result() {
  
  // @@protoc_insertion_point(field_mutable:mydb.Response.long_result)
  return long_result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Response::release_long_result() {
  // @@protoc_insertion_point(field_release:mydb.Response.long_result)
  
  return long_result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Response::set_allocated_long_result(::std::string* long_result) {
  if (long_result != NULL) {
    
  } else {
    
  }
  long_result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), long_result);
  // @@protoc_insertion_point(field_set_allocated:mydb.Response.long_result)
}

// map<string, bytes> text_result = 4;
int Response::text_result_size() const {
  return text_result_.size();
}
void Response::clear_text_result() {
  text_result_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
Response::text_result() const {
  // @@protoc_insertion_point(field_map:mydb.Response.text_result)
  return text_result_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
Response::mutable_text_result() {
  // @@protoc_insertion_point(field_mutable_map:mydb.Response.text_result)
  return text_result_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace mydb

// @@protoc_insertion_point(global_scope)
